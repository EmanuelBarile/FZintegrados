// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(FZIntegradosContext))]
    [Migration("20230113032610_Initial Commit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Diagnostico", b =>
                {
                    b.Property<int>("Id_Diagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Diagnostico"), 1L, 1);

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id_Diagnostico");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("DataAccess.Models.DiagnosticoMedicamento", b =>
                {
                    b.Property<int>("Diagnostico_Id")
                        .HasColumnType("INT");

                    b.Property<int>("Medicamento_Id")
                        .HasColumnType("INT");

                    b.HasKey("Diagnostico_Id", "Medicamento_Id");

                    b.HasIndex("Medicamento_Id");

                    b.ToTable("DiagnosticosMedicamentos");
                });

            modelBuilder.Entity("DataAccess.Models.Integrado", b =>
                {
                    b.Property<int>("Id_Integrado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Integrado"), 1L, 1);

                    b.Property<string>("Cod_Integrado")
                        .IsRequired()
                        .HasColumnType("VARCHAR(6)");

                    b.Property<int>("Crianza")
                        .HasColumnType("INT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("DATE");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id_Integrado");

                    b.ToTable("Integrados");
                });

            modelBuilder.Entity("DataAccess.Models.Medicamento", b =>
                {
                    b.Property<int>("Id_Medicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Medicamento"), 1L, 1);

                    b.Property<string>("Cod_Producto")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("Id_Diagnostico")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id_Medicamento");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("DataAccess.Models.Recorredor", b =>
                {
                    b.Property<int>("Id_Recorredor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Recorredor"), 1L, 1);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id_Recorredor");

                    b.ToTable("Recorredores");
                });

            modelBuilder.Entity("DataAccess.Models.RegistroDeRecorredor", b =>
                {
                    b.Property<int>("Id_Registro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Registro"), 1L, 1);

                    b.Property<int>("Cantidad_Dias_Tratamiento")
                        .HasColumnType("INT");

                    b.Property<int>("Cantidad_Medicamento")
                        .HasColumnType("INT");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("Fecha_Real")
                        .HasColumnType("DATE");

                    b.Property<string>("Galpon")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("DATE");

                    b.Property<int>("Id_Diagnostico")
                        .HasColumnType("INT");

                    b.Property<int>("Id_Integrado")
                        .HasColumnType("INT");

                    b.Property<int>("Id_Medicamento")
                        .HasColumnType("INT");

                    b.Property<int>("Id_Recorredor")
                        .HasColumnType("INT");

                    b.HasKey("Id_Registro");

                    b.HasIndex("Id_Diagnostico");

                    b.HasIndex("Id_Integrado");

                    b.HasIndex("Id_Medicamento");

                    b.HasIndex("Id_Recorredor");

                    b.ToTable("RegistrosDeRecorredor");
                });

            modelBuilder.Entity("DataAccess.Models.DiagnosticoMedicamento", b =>
                {
                    b.HasOne("DataAccess.Models.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("Diagnostico_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("Medicamento_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("DataAccess.Models.RegistroDeRecorredor", b =>
                {
                    b.HasOne("DataAccess.Models.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("Id_Diagnostico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Integrado", "Integrado")
                        .WithMany()
                        .HasForeignKey("Id_Integrado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("Id_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Recorredor", "Recorredor")
                        .WithMany()
                        .HasForeignKey("Id_Recorredor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Integrado");

                    b.Navigation("Medicamento");

                    b.Navigation("Recorredor");
                });
#pragma warning restore 612, 618
        }
    }
}
